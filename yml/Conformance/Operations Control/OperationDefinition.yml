resourceType: "OperationDefinition"
url<uri>$(Logical URI to reference this operation definition (globally unique)$):
version<string>$(Business version of the operation definition$):
name<string>$(R!  Name for this operation definition (computer friendly)$):
status<code=draft|active|retired>$(R!  draft | active | retired | unknown$):
kind<code>$(R!  operation | query$):
experimental<boolean>$(For testing purposes, not real usage$):
date<dateTime>$(Date this was last changed$):
publisher<string>$(Name of the publisher (organization or individual)$):
contact<list::ContactDetail>$(Contact details for the publisher$):
description<markdown>$(Natural language description of the operation definition$):
useContext<list::UsageContext>$(Context the content is intended to support$):
jurisdiction<list::CodeableConcept>$(Intended jurisdiction for operation definition (if applicable)$):
purpose<markdown>$(Why this operation definition is defined$):
idempotent<boolean>$(Whether content is unchanged by the operation$):
code<code>$(R!  Name used to invoke the operation$):
comment<string>$(Additional information about use$):
base<Reference(OperationDefinition)>$(Marks this as a profile of the base$):
resource<list::code>$(Types this operation applies to$):
system<boolean>$(R!  Invoke at the system level?$):
type<boolean>$(R!  Invole at the type level?$):
instance<boolean>$(R!  Invoke on an instance?$):
parameter<list>$(Parameters for the operation/query$):
  - name<code>$(R!  Name in Parameters.parameter.name or in URL$):
    use<code>$(R!  in | out$):
    min<integer>$(R!  Minimum Cardinality$):
    max<string>$(R!  Maximum Cardinality (a number or *)$):
    documentation<string>$(Description of meaning/use$):
    type<code>$(C? What type this parameter has$):
    searchType<code=number|date|string|token|reference|composite|quantity>$(C? number | date | string | token | reference | composite | quantity | uri$):
    profile<Reference(StructureDefinition)>$(Profile on the type$):
    binding:
        strength<code=required|extensible|preferred>$(R!  required | extensible | preferred | example$):
        valueSetUri<uri>$($):
        valueSetReference<Reference(ValueSet)>$($):
    part<list::Content as for OperationDefinition.parameter>$(C? Parts of a nested Parameter$):
overload<list>$(Define overloaded variants for when  generating code$):
  - parameterName<list::string>$(Name of parameter to include in overload$):
    comment<string>$(Comments to go on overload$):